precompile(Tuple{typeof(Base.setindex!), Base.EnvDict, Bool, String})
precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{Main.var"#1#3", REPL.LineEditREPL})
precompile(Tuple{typeof(fzf_jll.__init__)})
precompile(Tuple{typeof(fzf_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(Base.convert), Type{REPL.LineEdit.ModalInterface}, REPL.LineEdit.ModalInterface})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Type{Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{typeof(JuliaInterpreter.__init__)})
precompile(Tuple{typeof(Revise.__init__)})
precompile(Tuple{Revise.TaskThunk})
precompile(Tuple{typeof(Revise.watch_manifest), String})
precompile(Tuple{typeof(Revise.watch_package_callback), Base.PkgId})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(Revise.iswritable), String})
precompile(Tuple{typeof(Debugger.__init__)})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{Main.var"#2#4"})
precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.TextInterface, REPL.LineEdit.MIState, REPL.Terminals.AbstractTerminal, REPL.Terminals.TextTerminal})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#2#29", String}, Any, Any})
precompile(Tuple{Type{Crayons.Crayon}, Crayons.ANSIColor, Crayons.ANSIColor, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle, Crayons.ANSIStyle})
precompile(Tuple{typeof(Base.convert), Type{Crayons.Crayon}, Crayons.Crayon})
precompile(Tuple{OhMyREPL.Prompt.var"#2#29", Any, Any, Any})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.Unicode.textwidth), String})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{Type{Tokenize.Tokens.Token}})
precompile(Tuple{typeof(Tokenize.Tokens.exactkind), Tokenize.Tokens.Token})
precompile(Tuple{typeof(Base.:(==)), Tokenize.Tokens.Kind, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Tokenize.Tokens.kind), Tokenize.Tokens.Token})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.position), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.seek), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{Base.var"#readline##kw", NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{typeof(Base.flush), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#55#57"{REPL.LineEdit.PrefixHistoryPrompt}, String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#55#57"{REPL.LineEdit.PrefixHistoryPrompt}, Any, Any, Vararg{Any}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#22#49", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#22#49", Any, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.mode), REPL.LineEdit.MIState})
precompile(Tuple{typeof(REPL.LineEdit.state), REPL.LineEdit.MIState, REPL.LineEdit.TextInterface})
precompile(Tuple{typeof(Revise.revise_first), Expr})
precompile(Tuple{typeof(Base.isempty), Base.Set{Tuple{Revise.PkgData, String}}})
precompile(Tuple{typeof(Gumbo_jll.__init__)})
precompile(Tuple{typeof(Gumbo_jll.find_artifact_dir)})
precompile(Tuple{typeof(SentinelArrays.__init__)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(FilePathsBase.__init__)})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(CSV.__init__)})
precompile(Tuple{typeof(Base.convert), Type{Integer}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Integer}}, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}, String}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}, String}}, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Char, UInt8, String}}, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Char, UInt8}}, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, String, Parsers.Format, Base.AbstractDict{K, V} where V where K, AbstractArray{T, 1} where T, Dates.DateFormat{S, T} where T<:Tuple where S}}, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Type}}, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Function, Base.AbstractDict{K, V} where V where K, AbstractArray{T, 1} where T, Type}}, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{K, V} where V where K}, Base.Dict{Type, Type}})
precompile(Tuple{typeof(CSV.getbytebuffer), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Any, Bool, Any, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64, Int64})
precompile(Tuple{typeof(CSV.skipemptyrow), Array{UInt8, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(CSV.checkcommentandemptyline), Array{UInt8, 1}, Int64, Int64, Any, Bool})
precompile(Tuple{Type{Parsers.Options}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Array{String, 1}, Array{String, 1}, Nothing, Bool, Bool, Nothing, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options, Any, Bool})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CSV.var"#10#13"{Bool}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, CSV.var"#10#13"{Bool}}})
precompile(Tuple{typeof(CSV.makeunique), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{CSV.NeedsTypeDetection}})
precompile(Tuple{typeof(Base.values), Base.Dict{Type, Type}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{Type, Type}}})
precompile(Tuple{typeof(CSV.getpool), Tuple{Float64, Int64}})
precompile(Tuple{typeof(CSV.getname), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{CSV.Context}, Bool, String, Array{Symbol, 1}, Int64, Int64, Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options, Array{CSV.Column, 1}, Tuple{Float64, Int64}, Bool, Type, Base.Dict{Type, Type}, Type{InlineStrings.InlineString}, Int64, Bool, Int64, Array{Int64, 1}, Bool, Bool, Int64, Bool, Nothing, Bool})
precompile(Tuple{typeof(URIs.__init__)})
precompile(Tuple{typeof(MbedTLS_jll.__init__)})
precompile(Tuple{typeof(MbedTLS.f_send), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.find_artifact_dir)})
precompile(Tuple{typeof(Core.convert), Type{UnionAll}, Type{Type}})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(OpenSSL.on_bio_stream_create), OpenSSL.BIO})
precompile(Tuple{typeof(OpenSSL.on_bio_stream_read), OpenSSL.BIO, Ptr{Int8}, Int32})
precompile(Tuple{typeof(OpenSSL.on_bio_stream_write), OpenSSL.BIO, Ptr{Int8}, Int32})
precompile(Tuple{typeof(OpenSSL.__init__)})
precompile(Tuple{typeof(HTTP.Parsers.__init__)})
precompile(Tuple{typeof(HTTP.ConnectionRequest.__init__)})
precompile(Tuple{typeof(HTTP.MultiPartParsing.__init__)})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Infinity.__init__)})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{typeof(TimeZones.TZData.__init__)})
precompile(Tuple{typeof(Base.:(-)), Int32})
precompile(Tuple{typeof(Scratch.get_scratch!), Base.UUID, String, Base.UUID})
precompile(Tuple{typeof(Base.Filesystem.abspath), String, String, Vararg{String}})
precompile(Tuple{typeof(TimeZones.__init__)})
precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String, Vararg{AbstractString}})
precompile(Tuple{Type{Dates.DatePart{Char(0x7a000000)}}, Int64, Bool})
precompile(Tuple{Type{Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.ssszzz"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.DatePart{Char(0x7a000000)}}}}, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.DatePart{Char(0x7a000000)}}, Dates.DateLocale})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.foreach), typeof(Base.invokelatest), Array{Function, 1}})
precompile(Tuple{Infinity.var"#1#4"})
precompile(Tuple{typeof(Requires.withpath), Any, String})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.something), String, String, Vararg{String}})
precompile(Tuple{Infinity.var"#2#5"})
precompile(Tuple{typeof(Requires.err), Any, Module, String, String, Any})
precompile(Tuple{Infinity.var"#3#6"})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Requires._include_path), String})
precompile(Tuple{typeof(Base.source_path), Nothing})
precompile(Tuple{typeof(Infinity.include), String})
precompile(Tuple{typeof(Revise.watch_includes), Module, String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Symbol}, Symbol})
precompile(Tuple{typeof(Requires.withnotifications), Any, Vararg{Any}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}})
precompile(Tuple{Type{NamedTuple{(:mode,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:mode,), Tuple{Symbol}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:mode,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Revise.add_require), String, Module, String, String, Expr})
precompile(Tuple{typeof(Revise.is_same_file), String, String})
precompile(Tuple{typeof(Revise.process_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Expr, String, Module})
precompile(Tuple{typeof(Base.isequal), QuoteNode, QuoteNode})
precompile(Tuple{typeof(Base.hash), QuoteNode, UInt64})
precompile(Tuple{typeof(Base.hash), Any, UInt64})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, Base.Set{Any}}})
precompile(Tuple{typeof(Revise.revise_dir_queued), String})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:srcfiles_only,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:srcfiles_only,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(Memento.__init__)})
precompile(Tuple{typeof(Base.grow_to!), Array{Pair{Symbol, Bool}, 1}, Base.Generator{Base.RegexMatchIterator, Memento.var"#16#18"}})
precompile(Tuple{typeof(Base.rstrip), Base.Fix2{typeof(Base.in), Tuple{Char, Char}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.lstrip), Base.Fix2{typeof(Base.in), Tuple{Char, Char}}, Base.SubString{String}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Symbol})
precompile(Tuple{Type{Memento.DefaultHandler{F, O} where O<:IO where F}, Base.TTY, Memento.DefaultFormatter, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Memento.Handler{F} where F<:Memento.Formatter}, Memento.DefaultHandler{Memento.DefaultFormatter, Base.TTY}, String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{AbstractString, Memento.Logger}, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Memento.Logger})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Memento.Logger})
precompile(Tuple{Type{Memento.DefaultRecord}, String, String, Int64, String})
precompile(Tuple{typeof(Base.log), Memento.Logger, Memento.DefaultRecord})
precompile(Tuple{typeof(Memento.getpath), Memento.Logger})
precompile(Tuple{typeof(Base.split), String, Char})
precompile(Tuple{typeof(Base.all), Function, Array{Memento.Filter, 1}})
precompile(Tuple{typeof(Base._all), Memento.var"#47#48"{Memento.DefaultRecord}, Array{Memento.Filter, 1}, Base.Colon})
precompile(Tuple{Memento.var"#35#36"{Memento.Logger}, Memento.DefaultRecord})
precompile(Tuple{Memento.var"#level_filter#38"{Memento.Logger}, Memento.DefaultRecord})
precompile(Tuple{typeof(Base.get), Memento.Attribute{String}})
precompile(Tuple{Memento.var"#4#5"{String}})
precompile(Tuple{Type{Base.Some{String}}, String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{AbstractString, Int64}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Int64}, String})
precompile(Tuple{Memento.var"#77#83"})
precompile(Tuple{Memento.var"#78#84"})
precompile(Tuple{Memento.var"#79#85"})
precompile(Tuple{typeof(Base.promote_typejoin), Any, Any})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Memento.include), String})
precompile(Tuple{typeof(Base.include), Module, String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Symbol}})
precompile(Tuple{typeof(Revise.add_require), String, Module, String, String, Expr})
precompile(Tuple{typeof(Base.is_root_module), Module})
precompile(Tuple{typeof(Revise.process_source!), OrderedCollections.OrderedDict{Module, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}, Expr, String, Module})
precompile(Tuple{typeof(Base.uv_timercb), Ptr{Nothing}})
precompile(Tuple{typeof(Revise.revise_dir_queued), String})
precompile(Tuple{typeof(Kerberos_krb5_jll.__init__)})
precompile(Tuple{typeof(Kerberos_krb5_jll.find_artifact_dir)})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(LibPQ_jll.__init__)})
precompile(Tuple{typeof(LibPQ_jll.find_artifact_dir)})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(LibPQ.__init__)})
precompile(Tuple{typeof(Base.string), String, Symbol, String, String, Vararg{Union{Char, Base.SubString{String}, String, Symbol}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Memento.Logger}, Memento.Logger, String})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.uv_writecb_task), Ptr{Nothing}, Int32})
precompile(Tuple{typeof(FileWatching.uv_fseventscb_file), Ptr{Nothing}, Ptr{Int8}, Int32, Int32})
precompile(Tuple{typeof(Base._uv_hook_close), FileWatching.FileMonitor})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{Base.var"#readcb_specialized#677", Base.TTY, Int64, UInt64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{UInt8}}, Ptr{UInt8}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{UInt8}}, Ptr{UInt8}})
precompile(Tuple{OhMyREPL.Prompt.var"#2#29", Any, Any, Any})
precompile(Tuple{typeof(Base.uv_return_spawn), Ptr{Nothing}, Int64, Int32})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
precompile(Tuple{typeof(REPL.Terminals.clear_line), REPL.Terminals.TerminalBuffer})
precompile(Tuple{typeof(Base.get), Base.TTY, Symbol, Bool})
precompile(Tuple{typeof(OhMyREPL.untokenize_with_ANSI), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, OhMyREPL.PassHandler, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(REPL.Terminals.cmove_col), REPL.Terminals.TerminalBuffer, Int64})
precompile(Tuple{typeof(Base.unsafe_write), Base.TTY, Ptr{UInt8}, UInt64})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#1#8"{Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#2#9"{Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#2#9"{Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{OhMyREPL.Prompt.var"#22#49", Any, Any, Any})
precompile(Tuple{typeof(REPL.return_callback), Any})
precompile(Tuple{typeof(Base.write), Base.TTY, UInt8})
precompile(Tuple{typeof(Base.seekend), Base.IOStream})
precompile(Tuple{typeof(Base.print), Base.IOStream, String})
precompile(Tuple{typeof(Base.flush), Base.IOStream})
precompile(Tuple{REPL.var"#do_respond#66"{Bool, Bool, REPL.var"#77#87"{REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Any, Bool})
precompile(Tuple{REPL.var"#77#87"{REPL.LineEditREPL, REPL.REPLHistoryProvider}, Any})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Expr, Int64}})
precompile(Tuple{Type{Base.PkgId}, Nothing, String})
precompile(Tuple{Core.Compiler.var"#291#292", Any})
precompile(Tuple{typeof(Core.Compiler.fieldtype_tfunc), Any, Any, Any})
precompile(Tuple{typeof(Core.Compiler.isdefined_tfunc), Any, Any, Any})
precompile(Tuple{typeof(Core.Compiler.replacefield!_tfunc), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Core.Compiler.swapfield!_tfunc), Any, Any, Any})
precompile(Tuple{typeof(JuliaInterpreter.isidentical), Symbol})
precompile(Tuple{typeof(Base.argtail), Nothing})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:pop_new_node!,), Tuple{Base.Returns{Nothing}}}, Symbol})
precompile(Tuple{Type{Base.BottomRF{typeof(Base.:(|))}}, Function})
precompile(Tuple{typeof(JuliaInterpreter.breakpoints)})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.something), Nothing})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:dims,), Tuple{Base.Colon}}, Symbol})
precompile(Tuple{Type{Base.CanonicalIndexError}, String, Any})
precompile(Tuple{Type{NamedTuple{(:eval_now,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.keys), Base.Dict{Tuple{Revise.PkgData, String}, Tuple{Exception, Any}}})
precompile(Tuple{typeof(Revise.revise)})
precompile(Tuple{typeof(Base._uv_hook_close), Base.Timer})
precompile(Tuple{typeof(Base.hash), String, UInt64})
precompile(Tuple{typeof(Base.isequal), GlobalRef, GlobalRef})
precompile(Tuple{typeof(Base.hash), Bool, UInt64})
precompile(Tuple{typeof(Base.getproperty), Core.LineInfoNode, Symbol})
precompile(Tuple{Revise.var"#18#19"{Symbol}, Any})
precompile(Tuple{Type{NamedTuple{(:norequire,), T} where T<:Tuple}, Tuple{Base.BitSet}})
precompile(Tuple{LoweredCodeUtils.var"#lines_required!##kw", NamedTuple{(:norequire,), Tuple{Base.BitSet}}, typeof(LoweredCodeUtils.lines_required!), Array{Bool, 1}, Core.CodeInfo, LoweredCodeUtils.CodeEdges})
precompile(Tuple{Revise.var"##methods_by_execution!#25", Symbol, Bool, typeof(Revise.methods_by_execution!), Any, Revise.CodeTrackingMethodInfo, Base.Dict{Module, Array{Expr, 1}}, JuliaInterpreter.Frame, Array{Bool, 1}})
precompile(Tuple{typeof(Revise.add_includes!), Revise.CodeTrackingMethodInfo, Module, String})
precompile(Tuple{ArgParse.var"#@add_arg_table!", LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(ArgParse._add_arg_table!), Any, Any})
precompile(Tuple{typeof(Base.gensym)})
precompile(Tuple{typeof(Base.splice!), Array{Any, 1}, Int64, Array{Any, 1}})
precompile(Tuple{typeof(Base.isexpr), Any, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.isexpr), Any, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.all), Function, Array{Any, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#21#22", Array{Any, 1}, Base.Colon})
precompile(Tuple{ArgParse.var"#21#22", Any})
precompile(Tuple{typeof(Base.:(==)), GlobalRef, GlobalRef})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(LoweredCodeUtils.ismethod3), Expr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuliaInterpreter.FrameCode, Array{Any, 1}, Core.SimpleVector, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{JuliaInterpreter.FrameCode, Array{Any, 1}, Core.SimpleVector, DataType}, Int64, Int64})
precompile(Tuple{Type{JuliaInterpreter.DispatchableMethod}, Nothing, JuliaInterpreter.FrameInstance, Type})
precompile(Tuple{Type{Base.Some{Any}}, Function})
precompile(Tuple{typeof(JuliaInterpreter.getargs), Array{Any, 1}, JuliaInterpreter.Frame})
precompile(Tuple{Type{LineNumberNode}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{LineNumberNode, 1}}})
precompile(Tuple{DocStringExtensions.var"#32#33"{typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any}})
precompile(Tuple{typeof(DocStringExtensions.template_hook), LineNumberNode, Module, String, Expr, Bool})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any, Bool})
precompile(Tuple{typeof(Revise.parse_source), String, Module})
precompile(Tuple{Revise.var"#78#80"{OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}}})
precompile(Tuple{Distributed.var"#65#67", Distributed.LocalProcess})
precompile(Tuple{Distributed.var"#64#66", Distributed.LocalProcess})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Distributed.remotecall), Function, Distributed.LocalProcess, Module, Vararg{Any}})
precompile(Tuple{Distributed.var"##remotecall#155", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Distributed.remotecall), Function, Distributed.LocalProcess, Module, Vararg{Any}})
precompile(Tuple{typeof(Base.hash), Distributed.Future, UInt64})
precompile(Tuple{typeof(Base.lock), Distributed.var"#99#101"{Distributed.RRID, Distributed.var"#153#154"{typeof(eval), Tuple{Module, Expr}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, Base.ReentrantLock})
precompile(Tuple{Revise.var"#83#85"{Symbol, Revise.RelocatableExpr, OrderedCollections.OrderedDict{Revise.RelocatableExpr, Union{Nothing, Array{Any, 1}}}, Module}})
precompile(Tuple{Type{NamedTuple{(:norequire,), T} where T<:Tuple}, Tuple{Tuple{}}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:norequire,), Tuple{Tuple{}}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:norequire,), Tuple{Tuple{}}}, Symbol})
precompile(Tuple{LoweredCodeUtils.var"#lines_required!##kw", NamedTuple{(:norequire,), Tuple{Tuple{}}}, typeof(LoweredCodeUtils.lines_required!), Array{Bool, 1}, Core.CodeInfo, LoweredCodeUtils.CodeEdges})
precompile(Tuple{Revise.var"#maybe_add_includes_to_pkgdata!##kw", NamedTuple{(:eval_now,), Tuple{Bool}}, typeof(Revise.maybe_add_includes_to_pkgdata!), Revise.PkgData, String, Array{Pair{Module, String}, 1}})
precompile(Tuple{Type{Base.Some{Any}}, Type})
precompile(Tuple{Type{Base.Some{Any}}, Module})
precompile(Tuple{Type{Base.Some{Any}}, Symbol})
precompile(Tuple{Type{JuliaInterpreter.DispatchableMethod}, Nothing, JuliaInterpreter.Compiled, Type})
precompile(Tuple{typeof(Base.binding_module), Module, Symbol})
precompile(Tuple{Type{Base.Some{Any}}, Int64})
precompile(Tuple{Type{Base.Some{Any}}, Tuple{Int64}})
precompile(Tuple{Type{Base.Some{Any}}, UndefInitializer})
precompile(Tuple{Type{Base.Some{Any}}, Array{UInt8, 1}})
precompile(Tuple{Type{Base.Some{Any}}, UInt8})
precompile(Tuple{Type{Base.Some{Any}}, Bool})
precompile(Tuple{typeof(Base.fill!), Array{UInt8, 1}, UInt8})
precompile(Tuple{Type{Base.Some{Any}}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Some{Any}}, Array{Any, 1}})
precompile(Tuple{Type{Base.Some{Any}}, UInt64})
precompile(Tuple{Type{Base.Some{Any}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Some{Any}}, Tuple{Pair{Symbol, String}, Pair{Symbol, Int64}, Pair{Symbol, Module}}})
precompile(Tuple{Type{Base.Some{Any}}, Base.Rounding.RoundingMode{:Up}})
precompile(Tuple{Type{Base.Some{Any}}, Base.Rounding.RoundingMode{:ToZero}})
precompile(Tuple{typeof(JuliaInterpreter.append_any), Any})
precompile(Tuple{typeof(Base.ntupleany), JuliaInterpreter.var"#69#70"{JuliaInterpreter.Frame}, Int64})
precompile(Tuple{Type{Base.Some{Any}}, Tuple{Int64, Bool}})
precompile(Tuple{Type{Base.Some{Any}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Some{Any}}, Pair{Symbol, String}})
precompile(Tuple{Type{Base.Some{Any}}, Tuple{Pair{Symbol, String}, Int64}})
precompile(Tuple{Type{Base.Some{Any}}, String})
precompile(Tuple{typeof(Base.objectid), Any})
precompile(Tuple{Type{Base.Some{Any}}, Tuple{UInt64, Int64}})
precompile(Tuple{Type{Base.Some{Any}}, Tuple{UInt64, UInt64}})
precompile(Tuple{Type{Base.Some{Any}}, Pair{Symbol, Int64}})
precompile(Tuple{Type{Base.Some{Any}}, Tuple{Pair{Symbol, Int64}, Int64}})
precompile(Tuple{Type{Base.Some{Any}}, Pair{Symbol, Module}})
precompile(Tuple{Type{Base.Some{Any}}, Tuple{Pair{Symbol, Module}, Int64}})
precompile(Tuple{Type{Base.Some{Any}}, Core.SimpleVector})
precompile(Tuple{typeof(Base.Docs.doc), Base.Docs.Binding, Type})
precompile(Tuple{typeof(Base.map!), typeof(Base.Docs.parsedoc), Array{Any, 1}, Array{Base.Docs.DocStr, 1}})
precompile(Tuple{typeof(Markdown.hashheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.list), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.fencedcode), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.blockquote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.admonition), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.blocktex), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.blockinterp), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.indentcode), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.footnote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.github_table), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.setextheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.paragraph), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.inline_code), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Base.Docs.catdoc), Markdown.MD, Vararg{Markdown.MD}})
precompile(Tuple{Type{Markdown.MD}, Markdown.MD, Vararg{Markdown.MD}})
precompile(Tuple{typeof(Base.vcat), Markdown.MD})
precompile(Tuple{typeof(Revise.retry)})
precompile(Tuple{typeof(Distributed.finalize_ref), Distributed.Future})
precompile(Tuple{typeof(Base.isequal), Distributed.Future, Nothing})
precompile(Tuple{typeof(Base.getproperty), Distributed.RemoteValue, Symbol})
precompile(Tuple{Base.var"#623#624"{Base.WeakKeyDict{Distributed.AbstractRemoteRef, Nothing}}, Distributed.Future})
precompile(Tuple{typeof(Base.uvfinalize), Base.Timer})
precompile(Tuple{Distributed.var"#100#102"{Distributed.RemoteValue, Distributed.var"#153#154"{typeof(eval), Tuple{Module, Expr}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}})
precompile(Tuple{typeof(Distributed.run_work_thunk), Distributed.var"#153#154"{typeof(eval), Tuple{Module, Expr}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Bool})
precompile(Tuple{Type{Base.CapturedException}, UndefVarError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.put!), Distributed.RemoteValue, Distributed.RemoteException})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Distributed.RemoteException})
precompile(Tuple{typeof(Base.task_done_hook), Task})
precompile(Tuple{Base.var"#611#612"{Task}})
precompile(Tuple{typeof(REPL.with_repl_linfo), Any, REPL.LineEditREPL})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Pair{Symbol, Array{Tuple{String, Int64}, 1}}})
precompile(Tuple{REPL.var"#45#46"{REPL.LineEditREPL, Pair{Any, Bool}, Bool, Bool}, Any})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.TTY}, Pair{Symbol, Module}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{REPL.LineEdit.var"##refresh_multi_line#14", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{REPL.LineEdit.var"##refresh_multi_line#41", Bool, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.UnixTerminal, Union{REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PromptState}})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#6#13"{Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#7#14"{REPL.LineEdit.MIState, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.Prompt}})
precompile(Tuple{OhMyREPL.Prompt.var"#55#57"{REPL.LineEdit.PrefixHistoryPrompt}, Any, Any, Vararg{Any}})
precompile(Tuple{typeof(REPL.LineEdit.history_prev_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString})
precompile(Tuple{typeof(REPL.LineEdit.transition), Function, REPL.LineEdit.PrefixSearchState, REPL.LineEdit.Prompt})
precompile(Tuple{REPL.LineEdit.var"#244#252", REPL.LineEdit.MIState, REPL.LineEdit.ModeState, Union{Char, Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.Multimedia.display), Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{R} where R<:REPL.AbstractREPL, Any})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.TTY, String})
precompile(Tuple{typeof(Base.write), Base.TTY, String, String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.TTY, Pair{Symbol, Bool}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{String, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Type})
precompile(Tuple{typeof(Base.isassigned), Array{String, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.alignment), Base.IOContext{Base.TTY}, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
precompile(Tuple{typeof(Base.replace_in_print_matrix), Array{String, 1}, Int64, Int64, String})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, String, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, String})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{REPL.LineEdit.var"#243#251", REPL.LineEdit.MIState, REPL.LineEdit.ModeState, Any})
precompile(Tuple{typeof(REPL.LineEdit.history_next_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString})
precompile(Tuple{Type{NamedTuple{(:prog, :description, :epilog, :autofix_names), T} where T<:Tuple}, Tuple{String, String, String, Bool}})
precompile(Tuple{Type{NamedTuple{(:prog, :description, :epilog, :autofix_names), Tuple{String, String, String, Bool}}}, Tuple{String, String, String, Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:prog, :description, :epilog, :autofix_names), Tuple{String, String, String, Bool}}, Symbol})
precompile(Tuple{typeof(Base._compute_eltype), Any})
precompile(Tuple{typeof(Base.afoldl), Base.var"#49#50", Type, Type})
precompile(Tuple{Type{Base.RefValue{Any}}, Type})
precompile(Tuple{Type{NamedTuple{(:as_symbols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{UInt8}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{LibPQ.ConninfoDisplay}, LibPQ.ConninfoDisplay})
precompile(Tuple{typeof(Base.:(!=)), LibPQ.libpq_c.PostgresPollingStatusType, LibPQ.libpq_c.PostgresPollingStatusType})
precompile(Tuple{typeof(Base.:(==)), LibPQ.libpq_c.PostgresPollingStatusType, LibPQ.libpq_c.PostgresPollingStatusType})
precompile(Tuple{Type{NamedTuple{(:writable, :readable), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:writable, :readable), Tuple{Bool, Bool}}, Symbol})
precompile(Tuple{Type{LibPQ.Errors.JLConnectionError}, String})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:init,), Tuple{typeof(HTTP.StreamRequest.streamlayer)}}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:init,), Tuple{typeof(HTTP.StreamRequest.streamlayer)}}, Symbol})
precompile(Tuple{Type{Base.FlipArgs{HTTP.var"#21#27"}}, Function})
precompile(Tuple{typeof(Base.afoldl), Base.BottomRF{Base.FlipArgs{HTTP.var"#21#27"}}, Function})
precompile(Tuple{typeof(Base._foldl_impl), Base.BottomRF{Base.FlipArgs{HTTP.var"#21#27"}}, Function, Tuple{}})
precompile(Tuple{typeof(Base.foldl_impl), Base.BottomRF{Base.FlipArgs{HTTP.var"#21#27"}}, Function, Tuple{}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Function, Tuple{}})
precompile(Tuple{Base.var"##mapfoldr#261", Function, typeof(Base.mapfoldr), Function, Function, Tuple{}})
precompile(Tuple{Type{Base.FlipArgs{HTTP.var"#22#28"}}, Function})
precompile(Tuple{typeof(Base.reduce_empty), Base.FlipArgs{HTTP.var"#22#28"}, Type{Function}})
precompile(Tuple{typeof(Base.reduce_empty), Base.BottomRF{Base.FlipArgs{HTTP.var"#22#28"}}, Type{Function}})
precompile(Tuple{Type{Base.FlipArgs{HTTP.var"#24#30"}}, Function})
precompile(Tuple{typeof(Base.reduce_empty), Base.FlipArgs{HTTP.var"#24#30"}, Type{Union{}}})
precompile(Tuple{typeof(Base.reduce_empty), Base.BottomRF{Base.FlipArgs{HTTP.var"#24#30"}}, Type{Union{}}})
precompile(Tuple{typeof(Base.reduce_empty_iter), Base.BottomRF{Base.FlipArgs{HTTP.var"#24#30"}}, Tuple{}, Base.HasEltype})
precompile(Tuple{typeof(Base.reduce_empty_iter), Base.BottomRF{Base.FlipArgs{HTTP.var"#24#30"}}, Tuple{}})
precompile(Tuple{typeof(Base.foldl_impl), Base.BottomRF{Base.FlipArgs{HTTP.var"#24#30"}}, Base._InitialValue, Tuple{}})
precompile(Tuple{typeof(Base.mapfoldr_impl), Function, Function, Base._InitialValue, Tuple{}})
precompile(Tuple{Base.var"##mapfoldr#261", Base._InitialValue, typeof(Base.mapfoldr), Function, Function, Tuple{}})
precompile(Tuple{typeof(Base.mapfoldr), Function, Function, Tuple{}})
precompile(Tuple{Type{Base.FlipArgs{HTTP.var"#25#31"}}, Function})
precompile(Tuple{typeof(Base.reduce_empty), Base.FlipArgs{HTTP.var"#25#31"}, Type{Function}})
precompile(Tuple{typeof(Base.reduce_empty), Base.BottomRF{Base.FlipArgs{HTTP.var"#25#31"}}, Type{Function}})
precompile(Tuple{typeof(URIs._length_assert)})
precompile(Tuple{typeof(Base.:(∘)), Type, Type})
precompile(Tuple{typeof(Base.convert), Type{Type{AbstractTrees.PreOrderState{T} where T<:(AbstractTrees.TreeCursor{P, N} where N where P)}}, Type{AbstractTrees.PreOrderState{T} where T<:(AbstractTrees.TreeCursor{P, N} where N where P)}})
precompile(Tuple{typeof(Base.convert), Type{Type{AbstractTrees.TreeCursor{P, N} where N where P}}, Type{AbstractTrees.TreeCursor{P, N} where N where P}})
precompile(Tuple{Type{NamedTuple{(:copycols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:copycols,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Base.haslength), Type})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Tables.EmptyVector, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Nothing}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Nothing}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:copycols,), Tuple{Nothing}}, Symbol})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.:(^)), Int64, Int64})
precompile(Tuple{Base.var"#97#98"{typeof(Base.iszero)}, Bool})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.OneTo{Int64}, 1}}})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{22}})
precompile(Tuple{Type{NamedTuple{(:binary_format,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:binary_format,), Tuple{Bool}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.HasShape{1}, 1}}})
precompile(Tuple{typeof(Base.front), Tuple{}})
precompile(Tuple{typeof(Base.cconvert), Type, LibPQ.libpq_c.PGVerbosity})
precompile(Tuple{typeof(Base.convert), Type{LibPQ.libpq_c.PGVerbosity}, LibPQ.libpq_c.PGVerbosity})
precompile(Tuple{typeof(Base.cconvert), Type, LibPQ.libpq_c.PGContextVisibility})
precompile(Tuple{typeof(Base.convert), Type{LibPQ.libpq_c.PGContextVisibility}, LibPQ.libpq_c.PGContextVisibility})
precompile(Tuple{typeof(Base.unsafe_convert), Type{LibPQ.libpq_c.PGVerbosity}, LibPQ.libpq_c.PGVerbosity})
precompile(Tuple{typeof(Base.unsafe_convert), Type{LibPQ.libpq_c.PGContextVisibility}, LibPQ.libpq_c.PGContextVisibility})
precompile(Tuple{Type{LibPQ.Errors.JLResultError}, String})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:binary_format,), Tuple{Bool}}, Symbol})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Base.Iterators.Enumerate{Array{UInt32, 1}}}}, Int64})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{UInt32, 1}, Array{Type, 1}}}, Int64})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(), Tuple{}}, Symbol})
precompile(Tuple{Base.Iterators.var"#7#8"{Tuple{Array{Int64, 1}, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Vararg{Int64}}}, Tuple{Bool}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:bold,), Tuple{Bool}}, Type{Crayons.Crayon}})
precompile(Tuple{Type{NamedTuple{(:foreground,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:foreground,), Tuple{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.promote_type), Type, Type, Type})
precompile(Tuple{typeof(ScrapeSOU.julia_main)})
precompile(Tuple{ArgParse.var"#ArgParseSettings#5#6", AbstractString, AbstractString, AbstractString, AbstractString, AbstractString, Bool, Bool, Any, Bool, Bool, Bool, Bool, Bool, Function, Bool, Bool, Bool, Type{ArgParse.ArgParseSettings}})
precompile(Tuple{typeof(ArgParse.check_prefix_chars), Any})
precompile(Tuple{Type{Base.Set{Char}}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Char}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{Char}}, Base.Set{Char}})
precompile(Tuple{typeof(Base.copy), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseGroup, 1}}, Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{ArgParse.ArgParseTable}})
precompile(Tuple{typeof(Base.getindex), Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseField, 1}}, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{AbstractString, Any}}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseTable}, ArgParse.ArgParseTable})
precompile(Tuple{typeof(Base.convert), Type{Function}, typeof(ArgParse.default_handler)})
precompile(Tuple{Type{NamedTuple{(:help, :action), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{ArgParse.var"#add_arg_field!##kw", Any, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{ArgParse.var"##add_arg_field!#23", Base.Pairs{Symbol, V, Tuple{Vararg{Symbol, N}}, NamedTuple{names, T}} where T<:Tuple{Vararg{Any, N}} where names where N where V, typeof(ArgParse.add_arg_field!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(ArgParse.check_name_format), Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#24#26", Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}, Base.Generator{Base.Dict{Symbol, Any}, ArgParse.var"#24#26"}})
precompile(Tuple{ArgParse.var"#24#26", Any})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{Type{ArgParse.ArgConsumerType}})
precompile(Tuple{Type{ArgParse.ArgConsumerType}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Union{Int64, Symbol}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseSettings, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{typeof(ArgParse.check_type), Any, Type, AbstractString})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(ArgParse.check_action_is_valid), Symbol})
precompile(Tuple{typeof(ArgParse.check_nargs_and_action), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(ArgParse.is_flag_action), Symbol})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Int64})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(ArgParse.is_command_action), Symbol})
precompile(Tuple{Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Array{AbstractString, 1}}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.convert), Type{Type}, Type})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgConsumerType}, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.convert), Type{Function}, ArgParse.var"#3#4"})
precompile(Tuple{typeof(Base.convert), Type{Union{AbstractString, Array{var"#s4", 1} where var"#s4"<:AbstractString}}, String})
precompile(Tuple{typeof(ArgParse.name_to_fieldnames!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.foreach), ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Array{String, 1}})
precompile(Tuple{ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Any})
precompile(Tuple{ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Any, Any})
precompile(Tuple{ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Any})
precompile(Tuple{typeof(Base.replace), String, Pair{Char, Char}})
precompile(Tuple{typeof(ArgParse.check_long_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(ArgParse.check_short_opt_name), AbstractString, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{AbstractString, 1}})
precompile(Tuple{typeof(ArgParse.auto_dest_name), AbstractString, Array{AbstractString, 1}, Array{AbstractString, 1}, Bool})
precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 1}, Int64})
precompile(Tuple{ArgParse.var"#r#20"{Bool}, Any})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(ArgParse.get_group), AbstractString, ArgParse.ArgParseField, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.is_cmd), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseField, Symbol})
precompile(Tuple{typeof(ArgParse.is_arg), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseGroup, Symbol})
precompile(Tuple{typeof(Base.push!), Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(ArgParse.warn_extra_opts), Any, Array{Symbol, 1}})
precompile(Tuple{typeof(ArgParse.check_dest_name), AbstractString})
precompile(Tuple{ArgParse.var"#set_if_valid#28"{Array{Symbol, 1}, ArgParse.ArgParseField}, Any, Any})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Type})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Bool})
precompile(Tuple{typeof(ArgParse.check_arg_makes_sense), ArgParse.ArgParseSettings, ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.check_conflicts_with_commands), ArgParse.ArgParseSettings, ArgParse.ArgParseField, Bool})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseTable, Symbol})
precompile(Tuple{typeof(Base.keys), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(ArgParse.check_for_duplicates), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.push!), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Pair{Symbol, Any}}, Symbol, Type{String}})
precompile(Tuple{typeof(ArgParse.default_action), ArgParse.ArgConsumerType})
precompile(Tuple{typeof(ArgParse.default_action), Symbol})
precompile(Tuple{typeof(Base.append!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.deepcopy), String})
precompile(Tuple{typeof(ArgParse.auto_metavar), AbstractString, Bool})
precompile(Tuple{typeof(Base.Unicode.uppercase), String})
precompile(Tuple{typeof(ArgParse.check_metavar), AbstractString})
precompile(Tuple{typeof(ArgParse.is_multi_action), Symbol})
precompile(Tuple{typeof(ArgParse.is_multi_nargs), ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{typeof(ArgParse.check_default_type), String, Type})
precompile(Tuple{typeof(ArgParse.check_range_default), Any, Function})
precompile(Tuple{ArgParse.var"#25#27", Any})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:help, :arg_type), T} where T<:Tuple}, Tuple{String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:help, :arg_type), Tuple{String, DataType}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:help, :arg_type), Tuple{String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :arg_type), Tuple{String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :arg_type), Tuple{String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :arg_type), Tuple{String, DataType}}}})
precompile(Tuple{Type{Pair{Symbol, Any}}, Symbol, Type{Int64}})
precompile(Tuple{typeof(ArgParse.check_default_type), Nothing, Type})
precompile(Tuple{typeof(ArgParse.check_range_default), Nothing, Function})
precompile(Tuple{ArgParse.var"#parse_args##kw", Any, typeof(ArgParse.parse_args), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:as_symbols,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:as_symbols,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:as_symbols,), Tuple{Bool}}, Type{NamedTuple{(:as_symbols,), T} where T<:Tuple}})
precompile(Tuple{ArgParse.var"##parse_args#61", Bool, typeof(ArgParse.parse_args), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.check_settings_can_use_symbols), ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.isempty), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(ArgParse.parse_args_unhandled), Array{T, 1} where T, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(ArgParse.parse_args_unhandled), Array{T, 1} where T, ArgParse.ArgParseSettings, Bool})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#68#70", Array{String, 1}, Base.Colon})
precompile(Tuple{ArgParse.var"#68#70", Any})
precompile(Tuple{typeof(Base.isempty), Base.Set{Char}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Bool})
precompile(Tuple{Type{NamedTuple{(:action, :help, :group), T} where T<:Tuple}, Tuple{Symbol, String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{ArgParse.ParserState}, Array{T, 1} where T, ArgParse.ArgParseSettings, Bool})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#62#64", Base.Iterators.Filter{ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#62#64"}})
precompile(Tuple{ArgParse.var"#63#65", Any})
precompile(Tuple{typeof(Base.deepcopy), Bool})
precompile(Tuple{typeof(Base.deepcopy), Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, AbstractString}}, Nothing})
precompile(Tuple{Type{Base.Set{AbstractString}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{AbstractString}}, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Dict{ArgParse.ArgParseGroup, AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{Type{NamedTuple{(:taskref, :spawn), T} where T<:Tuple}, Tuple{Nothing, Bool}})
precompile(Tuple{Type{Base.Channel{T} where T}, Function})
precompile(Tuple{Base.var"##_#590", Nothing, Bool, Type{Base.Channel{Any}}, ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Int64})
precompile(Tuple{Base.var"#591#592"{ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Any})
precompile(Tuple{typeof(ArgParse.preparse!), Base.Channel{T} where T, ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ParserState, Symbol})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, AbstractString}}, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Nothing})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Channel{Any}})
precompile(Tuple{typeof(ArgParse.parse_long_opt!), ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseField}, ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.is_flag), ArgParse.ArgParseField})
precompile(Tuple{typeof(ArgParse.parse1_flag!), ArgParse.ParserState, ArgParse.ArgParseSettings, ArgParse.ArgParseField, Bool, AbstractString})
precompile(Tuple{typeof(ArgParse.test_exclusive_groups!), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseSettings, ArgParse.ArgParseField, AbstractString})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseGroup, 1}, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{ArgParse.ArgParseGroup, AbstractString}, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(ArgParse.idstring), ArgParse.ArgParseField})
precompile(Tuple{typeof(Base.push!), Base.Set{AbstractString}, String})
precompile(Tuple{typeof(ArgParse.found_command), ArgParse.ParserState})
precompile(Tuple{typeof(ArgParse.parse1_optarg!), ArgParse.ParserState, ArgParse.ArgParseSettings, ArgParse.ArgParseField, Any, AbstractString})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{String}, AbstractString})
precompile(Tuple{typeof(ArgParse.parse_item), Type{String}, AbstractString})
precompile(Tuple{typeof(ArgParse.test_range), Function, Any, AbstractString})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, Bool})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{Int64}, AbstractString})
precompile(Tuple{typeof(ArgParse.parse_item), Type{Int64}, AbstractString})
precompile(Tuple{Base.var"#595#596"{Base.Channel{Any}, Task}})
precompile(Tuple{typeof(ArgParse.test_required_args), ArgParse.ArgParseSettings, Base.Set{AbstractString}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#36#40", Base.Iterators.Filter{ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, Bool}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#36#40"}})
precompile(Tuple{ArgParse.var"#37#41", Any})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{ArgParse.ArgParseGroup, Bool}, Bool, ArgParse.ArgParseGroup})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{ArgParse.ArgParseGroup, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}, Int64})
precompile(Tuple{typeof(ArgParse.has_cmd), ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base._any), typeof(ArgParse.is_cmd), Array{ArgParse.ArgParseField, 1}, Base.Colon})
precompile(Tuple{typeof(Base.pop!), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(ArgParse.convert_to_symbols), Base.Dict{String, Any}})
precompile(Tuple{Type{LibPQ.ConnectionOption}, String, String, Base.Missing, Base.Missing, String, LibPQ.ConninfoDisplay, Int32})
precompile(Tuple{Type{LibPQ.ConnectionOption}, String, String, Base.Missing, String, String, LibPQ.ConninfoDisplay, Int32})
precompile(Tuple{Type{LibPQ.ConnectionOption}, String, String, String, Base.Missing, String, LibPQ.ConninfoDisplay, Int32})
precompile(Tuple{Type{LibPQ.ConnectionOption}, String, String, String, String, String, LibPQ.ConninfoDisplay, Int32})
precompile(Tuple{Type{LibPQ.ConnectionOption}, String, Base.Missing, Base.Missing, Base.Missing, String, LibPQ.ConninfoDisplay, Int32})
precompile(Tuple{Type{TimeZones.Class}, UInt8})
precompile(Tuple{typeof(Base.:(|)), TimeZones.Class, TimeZones.Class})
precompile(Tuple{typeof(TimeZones._tz_cache_length_assert)})
precompile(Tuple{typeof(Base.max), UInt8, UInt8})
precompile(Tuple{typeof(Base.:(<<)), Int16, Int64})
precompile(Tuple{typeof(Base.:(+)), UInt8, UInt8})
precompile(Tuple{typeof(Base.:(>=)), UInt8, UInt8})
precompile(Tuple{typeof(Printf.base), Type})
precompile(Tuple{Type{NamedTuple{(:modifier,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:modifier,), Tuple{String}}}, Tuple{String}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:modifier,), Tuple{String}}, Symbol})
precompile(Tuple{Type{Dates.Second}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Dates.Second}, Dates.Second})
precompile(Tuple{Type{NamedTuple{(:version,), T} where T<:Tuple}, Tuple{Char}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:version,), Tuple{Char}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:name,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:name,), Tuple{String}}}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:rev, :lt), T} where T<:Tuple}, Tuple{Bool, typeof(Dates.periodisless)}})
precompile(Tuple{Type{Base.Order.Lt{Base.Order.var"#1#3"{typeof(Dates.periodisless), typeof(Base.identity)}}}, Function})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:rev, :lt), Tuple{Bool, typeof(Dates.periodisless)}}, Symbol})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:by,), Tuple{TimeZones.var"#24#25"}}, Symbol})
precompile(Tuple{Type{Base.Order.By{TimeZones.var"#24#25", Base.Order.ForwardOrdering}}, Function, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.log), Memento.Logger, Memento.DefaultRecord})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(FileWatching.uv_pollcb), Ptr{Nothing}, Int32, Int32})
precompile(Tuple{Memento.var"#53#55"{LibPQ.Errors.PQConnectionError}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.log), Memento.DefaultHandler{Memento.DefaultFormatter, Base.TTY}, Memento.DefaultRecord})
precompile(Tuple{typeof(Base._all), Memento.var"#27#28"{Memento.DefaultRecord}, Array{Memento.Filter, 1}, Base.Colon})
precompile(Tuple{Memento.var"#level_filter#29"{Memento.DefaultHandler{Memento.DefaultFormatter, Base.TTY}}, Memento.DefaultRecord})
precompile(Tuple{typeof(Base._similar_for), Array{Pair{Symbol, Bool}, 1}, Type{Symbol}, Base.Generator{Array{Pair{Symbol, Bool}, 1}, Memento.var"#19#21"{Memento.DefaultFormatter, Memento.DefaultRecord}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Pair{Symbol, Bool}, 1}, Memento.var"#19#21"{Memento.DefaultFormatter, Memento.DefaultRecord}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Symbol, 1}, String, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Pair{Symbol, Bool}, 1}, Memento.var"#19#21"{Memento.DefaultFormatter, Memento.DefaultRecord}}, Int64, Int64})
precompile(Tuple{typeof(Base.get), Memento.Attribute{AbstractString}})
precompile(Tuple{Memento.var"#6#7"{String}})
precompile(Tuple{Type{Base.Some{AbstractString}}, String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{AbstractString, Symbol}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Symbol}, String})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.TTY, String, Vararg{String}})
precompile(Tuple{Base.var"##printstyled#917", Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.TTY, String, Vararg{Any}})
precompile(Tuple{Base.var"#with_output_color##kw", NamedTuple{(:bold, :underline, :blink, :reverse, :hidden), Tuple{Bool, Bool, Bool, Bool, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{Any}})
precompile(Tuple{Base.var"##with_output_color#916", Bool, Bool, Bool, Bool, Bool, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{Any}})
precompile(Tuple{Type{NamedTuple{(:exception, :backtrace), T} where T<:Tuple}, Tuple{LibPQ.Errors.PQConnectionError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:exception, :backtrace), Tuple{LibPQ.Errors.PQConnectionError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Symbol})
precompile(Tuple{typeof(Base.scrub_repl_backtrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{Type{NamedTuple{(:exception, :backtrace), T} where T<:Tuple}, Tuple{LibPQ.Errors.PQConnectionError, Array{Base.StackTraces.StackFrame, 1}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:exception, :backtrace), Tuple{LibPQ.Errors.PQConnectionError, Array{Base.StackTraces.StackFrame, 1}}}, Symbol})
precompile(Tuple{typeof(Base.display_error), Base.IOContext{Base.TTY}, Base.ExceptionStack})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.TTY}, String})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{LibPQ.Errors.PQConnectionError, Array{Base.StackTraces.StackFrame, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{LibPQ.Errors.PQConnectionError, Array{Base.StackTraces.StackFrame, 1}}}, Int64, Int64})
precompile(Tuple{Base.var"#showerror##kw", NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{Base.TTY}, LibPQ.Errors.PQConnectionError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Revise.update_stacktrace_lineno!), Array{Any, 1}})
precompile(Tuple{typeof(Base.:(-)), Int64, Int32})
precompile(Tuple{typeof(Base.print_type_stacktrace), Base.IOContext{Base.TTY}, Type})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{Base.var"#print_within_stacktrace##kw", NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.print_within_stacktrace), Base.IOContext{Base.TTY}, Type})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.TypeofBottom})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{}})
precompile(Tuple{typeof(ScrapeSOU.connect), String, String, String, Int64, String})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#8#35", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#8#35", Any, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#4#31", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#4#31", Any, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.BracketInserter.var"#5#12"{Char}, String}, Any, Any})
precompile(Tuple{OhMyREPL.BracketInserter.var"#5#12"{Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any}})
precompile(Tuple{REPL.LineEdit.var"#25#26"{OhMyREPL.Prompt.var"#9#36", String}, Any, Any})
precompile(Tuple{OhMyREPL.Prompt.var"#9#36", Any, Any, Any})
precompile(Tuple{typeof(Base.Enums.namemap), Type{LibPQ.libpq_c.ConnStatusType}})
precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.Multimedia.MIME{Symbol("text/plain")}, LibPQ.Connection})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, LibPQ.Connection})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, LibPQ.libpq_c.ConnStatusType})
precompile(Tuple{REPL.LineEdit.var"#25#26"{REPL.LineEdit.var"#242#250", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#242#250", REPL.LineEdit.MIState, REPL.LineEdit.ModeState, Any})
